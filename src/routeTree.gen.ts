/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoutesImport } from './routes/routes'
import { Route as RouteTreeImport } from './routes/routeTree'
import { Route as PublicRoutesImport } from './routes/PublicRoutes'
import { Route as PrivateRoutesImport } from './routes/PrivateRoutes'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RoutesRoute = RoutesImport.update({
  id: '/routes',
  path: '/routes',
  getParentRoute: () => rootRoute,
} as any)

const RouteTreeRoute = RouteTreeImport.update({
  id: '/routeTree',
  path: '/routeTree',
  getParentRoute: () => rootRoute,
} as any)

const PublicRoutesRoute = PublicRoutesImport.update({
  id: '/PublicRoutes',
  path: '/PublicRoutes',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoutesRoute = PrivateRoutesImport.update({
  id: '/PrivateRoutes',
  path: '/PrivateRoutes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/PrivateRoutes': {
      id: '/PrivateRoutes'
      path: '/PrivateRoutes'
      fullPath: '/PrivateRoutes'
      preLoaderRoute: typeof PrivateRoutesImport
      parentRoute: typeof rootRoute
    }
    '/PublicRoutes': {
      id: '/PublicRoutes'
      path: '/PublicRoutes'
      fullPath: '/PublicRoutes'
      preLoaderRoute: typeof PublicRoutesImport
      parentRoute: typeof rootRoute
    }
    '/routeTree': {
      id: '/routeTree'
      path: '/routeTree'
      fullPath: '/routeTree'
      preLoaderRoute: typeof RouteTreeImport
      parentRoute: typeof rootRoute
    }
    '/routes': {
      id: '/routes'
      path: '/routes'
      fullPath: '/routes'
      preLoaderRoute: typeof RoutesImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/PrivateRoutes': typeof PrivateRoutesRoute
  '/PublicRoutes': typeof PublicRoutesRoute
  '/routeTree': typeof RouteTreeRoute
  '/routes': typeof RoutesRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/PrivateRoutes': typeof PrivateRoutesRoute
  '/PublicRoutes': typeof PublicRoutesRoute
  '/routeTree': typeof RouteTreeRoute
  '/routes': typeof RoutesRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/PrivateRoutes': typeof PrivateRoutesRoute
  '/PublicRoutes': typeof PublicRoutesRoute
  '/routeTree': typeof RouteTreeRoute
  '/routes': typeof RoutesRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/PrivateRoutes' | '/PublicRoutes' | '/routeTree' | '/routes'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/PrivateRoutes' | '/PublicRoutes' | '/routeTree' | '/routes'
  id:
    | '__root__'
    | '/'
    | '/PrivateRoutes'
    | '/PublicRoutes'
    | '/routeTree'
    | '/routes'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PrivateRoutesRoute: typeof PrivateRoutesRoute
  PublicRoutesRoute: typeof PublicRoutesRoute
  RouteTreeRoute: typeof RouteTreeRoute
  RoutesRoute: typeof RoutesRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PrivateRoutesRoute: PrivateRoutesRoute,
  PublicRoutesRoute: PublicRoutesRoute,
  RouteTreeRoute: RouteTreeRoute,
  RoutesRoute: RoutesRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/PrivateRoutes",
        "/PublicRoutes",
        "/routeTree",
        "/routes"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/PrivateRoutes": {
      "filePath": "PrivateRoutes.tsx"
    },
    "/PublicRoutes": {
      "filePath": "PublicRoutes.tsx"
    },
    "/routeTree": {
      "filePath": "routeTree.ts"
    },
    "/routes": {
      "filePath": "routes.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
